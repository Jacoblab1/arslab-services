package parsers.cadmium;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import components.FilesMap;
import components.Helper;
import models.Link;
import models.Message;
import models.Model;
import models.Parsed;
import models.Port;
import models.Structure;
import models.StructureInfo;
import parsers.IParser;

public class Devs implements IParser {

	// private static final String TEMPLATE = "{\"value\":${0}}";
	private static String time;

	@Override
	public Parsed Parse(FilesMap files) throws IOException {
		String name = files.FindName("message");
		Structure structure = new Structure(new StructureInfo(name, "Cadmium", "DEVS"));

		structure.nodes = new ArrayList<Model>();
		structure.ports = new ArrayList<Port>();
		structure.links = new ArrayList<Link>();
		
		List<Message> messages = ParseLog(structure, files.FindStream("message"));

		return new Parsed(name, structure, messages);
	}

	private static List<Message> ParseLog(Structure structure, InputStream log) throws IOException {
		List<Message> messages = new ArrayList<Message>();
		
		Helper.ReadFile(log, (String l) -> {
			// [Sender_defs::packetSentOut: {1}, Sender_defs::ackReceivedOut: {}, Sender_defs::dataOut: {<1, 0>}] generated by model sender1
			if (l.startsWith("[")) {
				int i = l.indexOf(']') + 1;

				String left = l.substring(0, i);
				String right = l.substring(i); 
				
				// Read model name from right hand side
				String model = right.trim().split(" ")[3];
				
				// Process left hand side
				String clean = left.substring(1, left.length() - 1).replace(" ", "").replace("::",  ":");
				
				Arrays.stream(clean.split("\\}")).forEach(s -> {
					// Sender_defs:packetSentOut:{1}
					String[] e = s.split(":");
					
					String values = e[e.length - 1].replaceAll("\\{|\\}|<|>|\\s", "");					
					String port = e[e.length - 2];
					
					messages.add(new Message(time, model, port, values.split(",")));
				});
			}
			else time = l;
		});
		
		return messages;
	}
	
	public static Boolean Validate(FilesMap files) throws IOException {
		InputStream messages = files.FindStream("message");
		// InputStream states = files.FindStream("state");

		// TODO : For now, only messages is mandatory, states is not used. This is just a port of what we had client side.
		// Eventually, this should work with either of the files but one at least. We want to be able to handle messages 
		// exchanges or model states, but at least one or the other
		// if (messages == null && states == null) return false;
		if (messages == null) return false;
		
		List<String> lines = Helper.ReadNLines(messages, 3);

		long n1 = lines.get(2).chars().filter(c -> c == '(').count();
		long n2 = lines.get(2).chars().filter(c -> c == ')').count();

		// Shouldn't have any parentheses becasue no coordinates
		// TODO: Super shady, flimsy, etc. Figure out how to distinguish different formats properly.
		return n1 == 0 && n2 == 0;
	}
}
