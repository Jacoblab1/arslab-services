package parsers.cadmium;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import components.FilesMap;
import components.Helper;
import models.simulation.MessageCA;
import models.simulation.Structure;
import models.simulation.StructureInfo;
import parsers.ILogParser;
import parsers.cadmium.config.celldevs.Model;

public class CellDevs implements ILogParser {

	private static final String TEMPLATE = "{\"value\":${0}}";

	@Override
	public Structure Parse(FilesMap files) throws IOException {
		Structure structure = ParseStructure(files.FindStream(".json"));
		
		structure.setInfo(new StructureInfo(files.FindName("message"), "Cadmium", "Cell-DEVS"));

		ParseLog(structure, files.FindStream("message"));

		return structure;
	}

	public Structure ParseStructure(InputStream json) throws IOException {	
		Structure s = new Structure();
		
		ObjectMapper mapper = new ObjectMapper();
		
		// TODO : Temp until file is reviewed
		JsonNode node = mapper.readTree(json);
		
		Model jModel = mapper.treeToValue(node.get("scenario"), Model.class);
		
		models.simulation.ModelCA sModel = s.CreateModelCA(jModel.getName(), models.simulation.Model.Type.COUPLED, TEMPLATE);

		sModel.setSize(jModel.getSize());
				
		jModel.getPorts().forEach(p -> {
			models.simulation.Port.Type pType = p.getType() == "output" ? models.simulation.Port.Type.OUTPUT : models.simulation.Port.Type.INPUT;
			
			s.CreatePort(sModel, p.getName(), pType, TEMPLATE);
		});
		
		return s;
	}

	private void ParseLog(Structure structure, InputStream log) throws IOException {
		List<MessageCA> messages = new ArrayList<MessageCA>();
		
		Helper.ReadFile(log, (String l) -> {
			// [cadmium::celldevs::cell_ports_def<std::vector<int, std::allocator<int> >, co2>::cell_out: {(37,56) ; <-1,-10,2>}] generated by model CO2_model_(37,56)
			if (l.startsWith("[")) {
				int i = l.indexOf(']') + 1;
				
				// generated by model CO2_model_(37,56)
				String right = l.substring(i); 
				
				String model = right.trim().split(" ")[3];
								
				model = model.substring(0, model.indexOf("(") - 1);

				// [cadmium::celldevs::cell_ports_def<std::vector<int, std::allocator<int> >, co2>::cell_out: {(37,56) ; <-1,-10,2>}]
				String left = l.substring(0, i);

				// cadmium:celldevs:cell_ports_def<std:vector<int,std:allocator<int>>,co2>:cell_out:{(37,56);<-1,-10,2>}
				String clean = left.substring(1, left.length() - 1).replace(" ", "").replace("::",  ":");

				// cadmium:celldevs:cell_ports_def<std:vector<int,std:allocator<int>>,co2>:cell_out:{(37,56);<-1,-10,2>
				Arrays.stream(clean.split("\\}")).forEach(s -> {
					// Sender_defs:packetSentOut:{1}
					String[] e = s.split(":");
					
					// String port = e[e.length - 2];
					
					// 37,56;-1,-10,2
					String[] data = e[e.length - 1].replaceAll("\\(|\\)|\\{|\\}|<|>", "").split(";");					

					String[] sC = data[0].split(",");
					
					int[] coord = new int[3];

					coord[0] = Integer.parseInt(sC[0]);
					coord[1] = Integer.parseInt(sC[1]);
					coord[2] = (sC.length == 2) ? 0 : Integer.parseInt(sC[2]);
					
					// TODO : Write message for each port, temporary measure.
					String[] values = data[1].split(",");
										
					for (int j = 0; j < values.length; j++) {	
						messages.add(new MessageCA(structure.getTimesteps().size() - 2, structure.getPorts().get(j), coord, values[j]));
					}
				});
			}
			
			else structure.getTimesteps().add(l);
		});
		
		// Cadmium has an extra timestep 0
		structure.getTimesteps().remove(0);
		
		structure.setMessages(messages);
	}
	
	public Boolean Validate(FilesMap files) throws IOException {
		InputStream messages = files.FindStream("message");
		// InputStream states = files.FindStream("state");

		// TODO : For now, messages is mandatory. Eventually, this should work with either of the files but one at least.
		// We want to be able to handle messages exchanges or model states, but at least one or the other
		// if (messages == null && states == null) return false;
		if (messages == null) return false;
		
		List<String> lines = Helper.ReadNLines(messages, 3);

		messages.reset();
		
		long n1 = lines.get(2).chars().filter(c -> c == '(').count();
		long n2 = lines.get(2).chars().filter(c -> c == ')').count();

		// Shouldn't have any parentheses becasue no coordinates
		// TODO: Super shady, flimsy, etc. Figure out how to distinguish different formats properly.
		return n1 == 2 && n2 == 2;
	}
}
