package parsers.cadmium;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import components.FilesMap;
import components.Helper;
import models.Link;
import models.MessageCA;
import models.Model;
import models.Parsed;
import models.Port;
import models.Structure;
import models.StructureInfo;
import parsers.IParser;

public class CellDevs implements IParser {

	// private static final String TEMPLATE = "{\"value\":${0}}";
	private static String time;
	private static String model;

	@Override
	public Parsed Parse(FilesMap files) throws IOException {
		String name = files.FindName("message");
		Structure structure = new Structure(new StructureInfo(name, "Cadmium", "Cell-DEVS"));

		structure.nodes = new ArrayList<Model>();
		structure.ports = new ArrayList<Port>();
		structure.links = new ArrayList<Link>();

		List<MessageCA> messages = ParseLog(structure, files.FindStream("message"));

		return new Parsed(name, structure, messages);
	}

	private static List<MessageCA> ParseLog(Structure structure, InputStream log) throws IOException {
		List<MessageCA> messages = new ArrayList<MessageCA>();
		
		Helper.ReadFile(log, (String l) -> {
			// [cadmium::celldevs::cell_ports_def<std::vector<int, std::allocator<int> >, co2>::cell_out: {(37,56) ; <-1,-10,2>}] generated by model CO2_model_(37,56)
			if (l.startsWith("[")) {
				int i = l.indexOf(']') + 1;
				
				// generated by model CO2_model_(37,56)
				String right = l.substring(i); 
				
				model = right.trim().split(" ")[3];
								
				model = model.substring(0, model.indexOf("(") - 1);

				// [cadmium::celldevs::cell_ports_def<std::vector<int, std::allocator<int> >, co2>::cell_out: {(37,56) ; <-1,-10,2>}]
				String left = l.substring(0, i);

				// cadmium:celldevs:cell_ports_def<std:vector<int,std:allocator<int>>,co2>:cell_out:{(37,56);<-1,-10,2>}
				String clean = left.substring(1, left.length() - 1).replace(" ", "").replace("::",  ":");

				// cadmium:celldevs:cell_ports_def<std:vector<int,std:allocator<int>>,co2>:cell_out:{(37,56);<-1,-10,2>
				Arrays.stream(clean.split("\\}")).forEach(s -> {
					// Sender_defs:packetSentOut:{1}
					String[] e = s.split(":");

					String port = e[e.length - 2];
					
					// 37,56;-1,-10,2
					String[] data = e[e.length - 1].replaceAll("\\(|\\)|\\{|\\}|<|>", "").split(";");					

					String[] sC = data[0].split(",");
					
					int[] coord = new int[3];

					coord[0] = Integer.parseInt(sC[0]);
					coord[1] = Integer.parseInt(sC[1]);
					coord[2] = (sC.length == 2) ? 0 : Integer.parseInt(sC[2]);
					
					messages.add(new MessageCA(time, model, coord, port, data[1].split(",")));
				});
			}
			else time = l;
		});
		
		return messages;
	}
	
	public static Boolean Validate(FilesMap files) throws IOException {
		InputStream messages = files.FindStream("message");
		InputStream states = files.FindStream("state");

		// TODO : For now, messages is mandatory. Eventually, this should work with either of the files but one at least.
		// We want to be able to handle messages exchanges or model states, but at least one or the other
		if (messages == null && states == null) return false;
		
		List<String> lines = Helper.ReadNLines(messages, 3);

		long n1 = lines.get(2).chars().filter(c -> c == '(').count();
		long n2 = lines.get(2).chars().filter(c -> c == ')').count();

		// Shouldn't have any parentheses becasue no coordinates
		// TODO: Super shady, flimsy, etc. Figure out how to distinguish different formats properly.
		return n1 == 2 && n2 == 2;
	}
}
